// Generated by CoffeeScript 1.10.0
var Duplex, Strung, exporter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Duplex = require('stream').Duplex;

Strung = (function(superClass) {
  extend(Strung, superClass);

  function Strung(_source, _encoding) {
    this._source = _source;
    this._encoding = _encoding != null ? _encoding : 'utf8';
    Strung.__super__.constructor.call(this);
  }

  Strung.prototype._read = function(size) {
    var ref;
    if (!((ref = this._source) != null ? ref.length : void 0)) {
      return this.push(null);
    }
    this.push(this._source.slice(0, size));
    this._source = this._source.slice(size);
  };

  Strung.prototype._write = function(string, encoding, next) {
    string = string.toString(this._encoding);
    if (this.string != null) {
      this.string += string;
    } else {
      this.string = string;
    }
    return next();
  };

  Strung.prototype.pipe = function(stringOrStream, encoding) {
    if (encoding == null) {
      encoding = 'utf8';
    }
    if ('string' === typeof stringOrStream) {
      return this.reset(stringOrStream, encoding);
    } else {
      return Strung.__super__.pipe.call(this, stringOrStream);
    }
  };

  Strung.prototype.reset = function(string, encoding) {
    if (encoding == null) {
      encoding = 'utf8';
    }
    Duplex.call(this);
    this._source = string;
    this._encoding = encoding;
    delete this.string;
    return this;
  };

  return Strung;

})(Duplex);

module.exports = exporter = function(string, encoding) {
  return new Strung(string, encoding);
};

exporter.Strung = Strung;

exporter.pipe = function(string, encoding) {
  if (encoding == null) {
    encoding = 'utf8';
  }
  if ('string' !== typeof string) {
    throw new Error('exported strung function only accepts a string to pipe()');
  }
  return new Strung(string, encoding);
};
