{
  "name": "strung",
  "version": "1.0.4",
  "description": "Acts as a stream to send a string, gather a string, or both.",
  "main": "lib",
  "keywords": [
    "convert",
    "string",
    "stream",
    "source",
    "sink",
    "pipe",
    "piping",
    "readable",
    "writable",
    "duplex",
    "io",
    "input",
    "output",
    "memory"
  ],
  "author": {
    "name": "Eli Doran",
    "email": "eli+npm@elidoran.com"
  },
  "license": "MIT",
  "scripts": {
    "compile": "coffee --bare --compile lib",
    "clean": "rm -rf lib/*.js",
    "prepublish": "coffee --bare --compile lib",
    "postpublish": "rm -rf lib/*.js",
    "test": "mocha --compilers coffee:coffee-script/register --reporter spec --bail --check-leaks test/lib"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/elidoran/node-strung.git"
  },
  "bugs": {
    "url": "http://github.com/elidoran/node-strung/issues"
  },
  "devDependencies": {
    "coffee-script": "^1.10.0",
    "mocha": "^2.3.3",
    "through2": "^2.0.0"
  },
  "dependencies": {},
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# strung\n[![Build Status](https://travis-ci.org/elidoran/node-strung.svg?branch=master)](https://travis-ci.org/elidoran/node-strung)\n[![Dependency Status](https://gemnasium.com/elidoran/node-strung.png)](https://gemnasium.com/elidoran/node-strung)\n[![npm version](https://badge.fury.io/js/strung.svg)](http://badge.fury.io/js/strung)\n\nActs as a stream to send a string, gather a string, or both.\n\n## Install\n\n```sh\nnpm install strung --save\n```\n\n## Usage\n\nShow:\n\n1. using it as a source (a Readable with string content)\n2. using it as a sink (a Writable collecting string content)\n3. as both a source and a sink at once\n4. getting its class\n5. resetting an instance with a new string (to use as a source)\n6. resetting an instance with `pipe(string)` (to use as a source)\n\n```coffeescript\n# # Piping out: Strung as a source\n\n# 1a. create instance with string to pipe out\nstrung = require('strung') 'some string'\n# 1b. pipe string to another stream\nstrung.pipe anotherStream\n\n# 2a. get strung function to use to create instances\nStrung = require('strung')\n# 2b. create an instance with a string and pipe it to another stream\nStrung('some string').pipe anotherStream\n#  or:\nStrung.pipe('some string').pipe(anotherStream)\n\n# # Piping in: Strung as a sink\n\n# 3a. get strung function to create an instance\nStrung = require 'strung'\n# 3b. create a source strung\nsink = Strung()\n# combine 3a and 3b:\nsink = require('strung')()\n# 3c. use event to get full string from sink\nsink.on 'finish', ->\n  console.log 'collected string:',sink.string\n# 3d. pipe stream to strung\nanotherStream.pipe sink\n\n# # Both source and sink\n\n# 4a. get instance from function (like 1a)\nstrung = require('strung') 'some string'\n# 4b. use event to get full string from it\nstrung.on 'finish', ->\n  console.log 'collected string:',strung.string\n# 4c. pipe to another stream and then back to itself\nstrung.pipe(anotherStream).pipe(strung)\n\n# # Separate instances for source and sink\n\n# 5a. get function to create instances\nstrung = require 'strung'\n# 5b. create a source\nsource = strung 'some string'\n# 5c. create a sink\nsink = strung()\n# 5d. use event to get full string from sink\nsink.on 'finish', ->\n  console.log 'collected string:',sink.string\n# 5e. pipe source thru another stream to sink\nsource.pipe(anotherStream).pipe(sink)\n\n# # the Strung class is also exported as a subproperty\n\n# 6a. get class\n{Strung} = require 'strung'\n#  or:\nStrung = require('strung').Strung\n# 6b. create an instance as a source (has a string) (can be a sink, too)\nsource = new Strung 'some string'\n# 6c. create an instance as a sink (no string)\nsink = new Strung\n\n# # reset strung instance with new string\n# 7a. create a strung instance\nstrung = require('strung') 'some string'\n# 7b. use event to continue when it's done:\nstrung.on 'finish', ->\n  console.log 'collected string:',strung.string\n  # 7d. reuse it to pipe something else via reset\n  strung.reset('a new string').pipe(differentStream).pipe(strung)\n  # OR:\n  # 7e. call pipe with a string which does a reset and returns itself\n  strung.pipe('a new string').pipe(differentStream).pipe(strung)\n# 7c. use strung\nstrung.pipe(anotherStream).pipe(strung)\n```\n\n## MIT License\n",
  "readmeFilename": "README.md",
  "gitHead": "1ce760927ff325a1b1f4f87ce6b0df7a1b944024",
  "homepage": "https://github.com/elidoran/node-strung#readme",
  "_id": "strung@1.0.4",
  "_shasum": "82c29b26c641863979337e048fa8bffc3f94bccf",
  "_from": "strung@1.0.4"
}
